- name: configure backend server
  hosts: backend
  become: yes
  vars: 
    login_host: db.devopsnavyahome.online
    login_password: ExpenseApp@1
  tasks:
  - name: diable default nodejs
    ansible.builtin.command: dnf module disable nodejs -y

  - name: enable nodejs:20
    ansible.builtin.command: dnf module enable nodejs:20 -y
  
  - name: install nodejs
    ansible.builtin.dnf:   # only works for Redhat family
      name: "{{item}}"
      state: installed
    loop:
      - nodejs
      - mysql
  
  - name: create expense user
    ansible.builtin.user:
      name: expense

  - name: create app directory
    ansible.builtin.file:
      path: /app
      state: directory

  - name: download backend code
    ansible.builtin.get_url:
      url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
      dest: /tmp/backend.zip

  - name: unzip backend code
    ansible.builtin.unarchive:
      src: /tmp/backend.zip    # by default checks in ansible server 
      dest: /app  
      remote_src: yes   # unarchive the file which is already on the remote server
    
  - name: install npm dependencies
    ansible.builtin.command: npm install
    args:            # args keyword is used for telling ansible to go to /app dir and run the above command
      chdir: /app    # if you dont give args, we dont know where we are in the ansible server

  - name: copy backend service
    ansible.builtin.copy:      #Â copying the backend service to remote server
      src: backend.service
      dest: /etc/systemd/system/backend.service

  - name: installing mysql dependencies
    ansible.builtin.pip:
      name:
        - PyMYSQL        # to connect MYSQL DB from ansible server
        - cryptography
      executable: pip3.9  # pip3.11 if python version is 3.11
    
  - name: import data into mysql      # establishing the mysql connection by giving host, username and password
    community.mysql.mysql_db:
      login_user: root
      login_password: "{{ login_password }}"
      login_host: "{{ login_host }}"
      target: /app/schema/backend.sql
      state: import
      name: all         # to import all the data


  - name: daemon reload
    ansible.builtin.systemd_service:
      daemon_reload: true

  - name: start backend service
    ansible.builtin.service:
      name: backend.service
      state: started
      enabled: yes
      
  